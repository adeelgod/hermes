package com.m11n.hermes.core.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.joda.beans.*;
import org.joda.beans.impl.direct.*;

import javax.xml.bind.annotation.XmlRootElement;
import java.util.Map;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
@JsonIgnoreProperties({"meta", "metaBean"})
@XmlRootElement(name = "printer_status")
public class PrinterStatus extends DirectBean
{
    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    private String state;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    private String reason;

    public PrinterStatus() {

    }

    public PrinterStatus(String state, String reason) {
        this.state = state;
        this.reason = reason;
    }

    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code PrinterStatus}.
     * @return the meta-bean, not null
     */
    public static PrinterStatus.Meta meta() {
        return PrinterStatus.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(PrinterStatus.Meta.INSTANCE);
    }

    @Override
    public PrinterStatus.Meta metaBean() {
        return PrinterStatus.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the state.
     * @return the value of the property
     */
    public String getState() {
        return state;
    }

    /**
     * Sets the state.
     * @param state  the new value of the property
     */
    public void setState(String state) {
        this.state = state;
    }

    /**
     * Gets the the {@code state} property.
     * @return the property, not null
     */
    public final Property<String> state() {
        return metaBean().state().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the reason.
     * @return the value of the property
     */
    public String getReason() {
        return reason;
    }

    /**
     * Sets the reason.
     * @param reason  the new value of the property
     */
    public void setReason(String reason) {
        this.reason = reason;
    }

    /**
     * Gets the the {@code reason} property.
     * @return the property, not null
     */
    public final Property<String> reason() {
        return metaBean().reason().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public PrinterStatus clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            PrinterStatus other = (PrinterStatus) obj;
            return JodaBeanUtils.equal(getState(), other.getState()) &&
                    JodaBeanUtils.equal(getReason(), other.getReason());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getState());
        hash = hash * 31 + JodaBeanUtils.hashCode(getReason());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(96);
        buf.append("PrinterStatus{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("state").append('=').append(JodaBeanUtils.toString(getState())).append(',').append(' ');
        buf.append("reason").append('=').append(JodaBeanUtils.toString(getReason())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code PrinterStatus}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code state} property.
         */
        private final MetaProperty<String> state = DirectMetaProperty.ofReadWrite(
                this, "state", PrinterStatus.class, String.class);
        /**
         * The meta-property for the {@code reason} property.
         */
        private final MetaProperty<String> reason = DirectMetaProperty.ofReadWrite(
                this, "reason", PrinterStatus.class, String.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "state",
                "reason");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 109757585:  // state
                    return state;
                case -934964668:  // reason
                    return reason;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends PrinterStatus> builder() {
            return new DirectBeanBuilder<PrinterStatus>(new PrinterStatus());
        }

        @Override
        public Class<? extends PrinterStatus> beanType() {
            return PrinterStatus.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code state} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> state() {
            return state;
        }

        /**
         * The meta-property for the {@code reason} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> reason() {
            return reason;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 109757585:  // state
                    return ((PrinterStatus) bean).getState();
                case -934964668:  // reason
                    return ((PrinterStatus) bean).getReason();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 109757585:  // state
                    ((PrinterStatus) bean).setState((String) newValue);
                    return;
                case -934964668:  // reason
                    ((PrinterStatus) bean).setReason((String) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}

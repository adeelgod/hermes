package com.m11n.hermes.core.model;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlRootElement;

import org.joda.beans.BeanDefinition;
import org.joda.beans.MetaBean;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.util.Map;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
@JsonIgnoreProperties({"meta", "metaBean"})
@XmlRootElement(name = "documents_documents")
@Entity
@Table(name = "hermes_documents_documents")
public class DocumentsDocuments extends DirectBean {
    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Id
    @Column(name = "id", unique = true)
    @GeneratedValue
    private Integer id;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "type")
    private String type;

    @PropertyDefinition
    @JsonSerialize
    @Column(name = "order_id")
    private String orderId;

    @PropertyDefinition
    @JsonSerialize
    @Column(name = "created_at")
    private Date createdAt = new Date();

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "path_live")
    private String pathLive = "";

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "path_print")
    private String pathPrint = "";

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "num_printed")
    private Integer numPrinted = 0;
    
    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code DocumentsDocuments}.
     * @return the meta-bean, not null
     */
    public static DocumentsDocuments.Meta meta() {
        return DocumentsDocuments.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(DocumentsDocuments.Meta.INSTANCE);
    }

    @Override
    public DocumentsDocuments.Meta metaBean() {
        return DocumentsDocuments.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the id.
     * @return the value of the property
     */
    public Integer getId() {
        return id;
    }

    /**
     * Sets the id.
     * @param id  the new value of the property
     */
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Gets the the {@code id} property.
     * @return the property, not null
     */
    public final Property<Integer> id() {
        return metaBean().id().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the type.
     * @return the value of the property
     */
    public String getType() {
        return type;
    }

    /**
     * Sets the type.
     * @param type  the new value of the property
     */
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Gets the the {@code type} property.
     * @return the property, not null
     */
    public final Property<String> type() {
        return metaBean().type().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the orderId.
     * @return the value of the property
     */
    public String getOrderId() {
        return orderId;
    }

    /**
     * Sets the orderId.
     * @param orderId  the new value of the property
     */
    public void setOrderId(String orderId) {
        this.orderId = orderId;
    }

    /**
     * Gets the the {@code orderId} property.
     * @return the property, not null
     */
    public final Property<String> orderId() {
        return metaBean().orderId().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the createdAt.
     * @return the value of the property
     */
    public Date getCreatedAt() {
        return createdAt;
    }

    /**
     * Sets the createdAt.
     * @param createdAt  the new value of the property
     */
    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Gets the the {@code createdAt} property.
     * @return the property, not null
     */
    public final Property<Date> createdAt() {
        return metaBean().createdAt().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the pathLive.
     * @return the value of the property
     */
    public String getPathLive() {
        return pathLive;
    }

    /**
     * Sets the pathLive.
     * @param pathLive  the new value of the property
     */
    public void setPathLive(String pathLive) {
        this.pathLive = pathLive;
    }

    /**
     * Gets the the {@code pathLive} property.
     * @return the property, not null
     */
    public final Property<String> pathLive() {
        return metaBean().pathLive().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the pathPrint.
     * @return the value of the property
     */
    public String getPathPrint() {
        return pathPrint;
    }

    /**
     * Sets the pathPrint.
     * @param pathPrint  the new value of the property
     */
    public void setPathPrint(String pathPrint) {
        this.pathPrint = pathPrint;
    }

    /**
     * Gets the the {@code pathPrint} property.
     * @return the property, not null
     */
    public final Property<String> pathPrint() {
        return metaBean().pathPrint().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the numPrinted.
     * @return the value of the property
     */
    public Integer getNumPrinted() {
        return numPrinted;
    }

    /**
     * Sets the numPrinted.
     * @param numPrinted  the new value of the property
     */
    public void setNumPrinted(Integer numPrinted) {
        this.numPrinted = numPrinted;
    }

    /**
     * Gets the the {@code numPrinted} property.
     * @return the property, not null
     */
    public final Property<Integer> numPrinted() {
        return metaBean().numPrinted().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public DocumentsDocuments clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            DocumentsDocuments other = (DocumentsDocuments) obj;
            return JodaBeanUtils.equal(getId(), other.getId()) &&
                    JodaBeanUtils.equal(getType(), other.getType()) &&
                    JodaBeanUtils.equal(getOrderId(), other.getOrderId()) &&
                    JodaBeanUtils.equal(getCreatedAt(), other.getCreatedAt()) &&
                    JodaBeanUtils.equal(getPathLive(), other.getPathLive()) &&
                    JodaBeanUtils.equal(getPathPrint(), other.getPathPrint()) &&
                    JodaBeanUtils.equal(getNumPrinted(), other.getNumPrinted());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getId());
        hash = hash * 31 + JodaBeanUtils.hashCode(getType());
        hash = hash * 31 + JodaBeanUtils.hashCode(getOrderId());
        hash = hash * 31 + JodaBeanUtils.hashCode(getCreatedAt());
        hash = hash * 31 + JodaBeanUtils.hashCode(getPathLive());
        hash = hash * 31 + JodaBeanUtils.hashCode(getPathPrint());
        hash = hash * 31 + JodaBeanUtils.hashCode(getNumPrinted());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(256);
        buf.append("DocumentsDocuments{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("id").append('=').append(JodaBeanUtils.toString(getId())).append(',').append(' ');
        buf.append("type").append('=').append(JodaBeanUtils.toString(getType())).append(',').append(' ');
        buf.append("orderId").append('=').append(JodaBeanUtils.toString(getOrderId())).append(',').append(' ');
        buf.append("createdAt").append('=').append(JodaBeanUtils.toString(getCreatedAt())).append(',').append(' ');
        buf.append("pathLive").append('=').append(JodaBeanUtils.toString(getPathLive())).append(',').append(' ');
        buf.append("pathPrint").append('=').append(JodaBeanUtils.toString(getPathPrint())).append(',').append(' ');
        buf.append("numPrinted").append('=').append(JodaBeanUtils.toString(getNumPrinted())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code DocumentsDocuments}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code id} property.
         */
        private final MetaProperty<Integer> id = DirectMetaProperty.ofReadWrite(
                this, "id", DocumentsDocuments.class, Integer.class);
        /**
         * The meta-property for the {@code type} property.
         */
        private final MetaProperty<String> type = DirectMetaProperty.ofReadWrite(
                this, "type", DocumentsDocuments.class, String.class);
        /**
         * The meta-property for the {@code orderId} property.
         */
        private final MetaProperty<String> orderId = DirectMetaProperty.ofReadWrite(
                this, "orderId", DocumentsDocuments.class, String.class);
        /**
         * The meta-property for the {@code createdAt} property.
         */
        private final MetaProperty<Date> createdAt = DirectMetaProperty.ofReadWrite(
                this, "createdAt", DocumentsDocuments.class, Date.class);
        /**
         * The meta-property for the {@code pathLive} property.
         */
        private final MetaProperty<String> pathLive = DirectMetaProperty.ofReadWrite(
                this, "pathLive", DocumentsDocuments.class, String.class);
        /**
         * The meta-property for the {@code pathPrint} property.
         */
        private final MetaProperty<String> pathPrint = DirectMetaProperty.ofReadWrite(
                this, "pathPrint", DocumentsDocuments.class, String.class);
        /**
         * The meta-property for the {@code numPrinted} property.
         */
        private final MetaProperty<Integer> numPrinted = DirectMetaProperty.ofReadWrite(
                this, "numPrinted", DocumentsDocuments.class, Integer.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "id",
                "type",
                "orderId",
                "createdAt",
                "pathLive",
                "pathPrint",
                "numPrinted");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return id;
                case 3575610:  // type
                    return type;
                case -1207110391:  // orderId
                    return orderId;
                case 598371643:  // createdAt
                    return createdAt;
                case 1234169521:  // pathLive
                    return pathLive;
                case -391500408:  // pathPrint
                    return pathPrint;
                case 1177276838:  // numPrinted
                    return numPrinted;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends DocumentsDocuments> builder() {
            return new DirectBeanBuilder<DocumentsDocuments>(new DocumentsDocuments());
        }

        @Override
        public Class<? extends DocumentsDocuments> beanType() {
            return DocumentsDocuments.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code id} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> id() {
            return id;
        }

        /**
         * The meta-property for the {@code type} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> type() {
            return type;
        }

        /**
         * The meta-property for the {@code orderId} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> orderId() {
            return orderId;
        }

        /**
         * The meta-property for the {@code createdAt} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Date> createdAt() {
            return createdAt;
        }

        /**
         * The meta-property for the {@code pathLive} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> pathLive() {
            return pathLive;
        }

        /**
         * The meta-property for the {@code pathPrint} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> pathPrint() {
            return pathPrint;
        }

        /**
         * The meta-property for the {@code numPrinted} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> numPrinted() {
            return numPrinted;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return ((DocumentsDocuments) bean).getId();
                case 3575610:  // type
                    return ((DocumentsDocuments) bean).getType();
                case -1207110391:  // orderId
                    return ((DocumentsDocuments) bean).getOrderId();
                case 598371643:  // createdAt
                    return ((DocumentsDocuments) bean).getCreatedAt();
                case 1234169521:  // pathLive
                    return ((DocumentsDocuments) bean).getPathLive();
                case -391500408:  // pathPrint
                    return ((DocumentsDocuments) bean).getPathPrint();
                case 1177276838:  // numPrinted
                    return ((DocumentsDocuments) bean).getNumPrinted();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    ((DocumentsDocuments) bean).setId((Integer) newValue);
                    return;
                case 3575610:  // type
                    ((DocumentsDocuments) bean).setType((String) newValue);
                    return;
                case -1207110391:  // orderId
                    ((DocumentsDocuments) bean).setOrderId((String) newValue);
                    return;
                case 598371643:  // createdAt
                    ((DocumentsDocuments) bean).setCreatedAt((Date) newValue);
                    return;
                case 1234169521:  // pathLive
                    ((DocumentsDocuments) bean).setPathLive((String) newValue);
                    return;
                case -391500408:  // pathPrint
                    ((DocumentsDocuments) bean).setPathPrint((String) newValue);
                    return;
                case 1177276838:  // numPrinted
                    ((DocumentsDocuments) bean).setNumPrinted((Integer) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}

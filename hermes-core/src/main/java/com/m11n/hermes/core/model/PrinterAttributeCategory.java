package com.m11n.hermes.core.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.joda.beans.*;
import org.joda.beans.impl.direct.*;

import javax.xml.bind.annotation.XmlRootElement;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
@JsonIgnoreProperties({"meta", "metaBean"})
@XmlRootElement(name = "printer_attribute_category")
public class PrinterAttributeCategory extends DirectBean
{
    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    private String name;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    private List<PrinterAttribute> attributes;

    public PrinterAttributeCategory() {

    }

    public PrinterAttributeCategory(String name) {
        this.name = name;
    }

    public void addAttribute(PrinterAttribute attribute) {
        if(attributes==null) {
            attributes = new ArrayList<>();
        }

        attributes.add(attribute);
    }

    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code PrinterAttributeCategory}.
     * @return the meta-bean, not null
     */
    public static PrinterAttributeCategory.Meta meta() {
        return PrinterAttributeCategory.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(PrinterAttributeCategory.Meta.INSTANCE);
    }

    @Override
    public PrinterAttributeCategory.Meta metaBean() {
        return PrinterAttributeCategory.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the name.
     * @return the value of the property
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name.
     * @param name  the new value of the property
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Gets the the {@code name} property.
     * @return the property, not null
     */
    public final Property<String> name() {
        return metaBean().name().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the attributes.
     * @return the value of the property
     */
    public List<PrinterAttribute> getAttributes() {
        return attributes;
    }

    /**
     * Sets the attributes.
     * @param attributes  the new value of the property
     */
    public void setAttributes(List<PrinterAttribute> attributes) {
        this.attributes = attributes;
    }

    /**
     * Gets the the {@code attributes} property.
     * @return the property, not null
     */
    public final Property<List<PrinterAttribute>> attributes() {
        return metaBean().attributes().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public PrinterAttributeCategory clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            PrinterAttributeCategory other = (PrinterAttributeCategory) obj;
            return JodaBeanUtils.equal(getName(), other.getName()) &&
                    JodaBeanUtils.equal(getAttributes(), other.getAttributes());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getName());
        hash = hash * 31 + JodaBeanUtils.hashCode(getAttributes());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(96);
        buf.append("PrinterAttributeCategory{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("name").append('=').append(JodaBeanUtils.toString(getName())).append(',').append(' ');
        buf.append("attributes").append('=').append(JodaBeanUtils.toString(getAttributes())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code PrinterAttributeCategory}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code name} property.
         */
        private final MetaProperty<String> name = DirectMetaProperty.ofReadWrite(
                this, "name", PrinterAttributeCategory.class, String.class);
        /**
         * The meta-property for the {@code attributes} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<PrinterAttribute>> attributes = DirectMetaProperty.ofReadWrite(
                this, "attributes", PrinterAttributeCategory.class, (Class) List.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "name",
                "attributes");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 3373707:  // name
                    return name;
                case 405645655:  // attributes
                    return attributes;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends PrinterAttributeCategory> builder() {
            return new DirectBeanBuilder<PrinterAttributeCategory>(new PrinterAttributeCategory());
        }

        @Override
        public Class<? extends PrinterAttributeCategory> beanType() {
            return PrinterAttributeCategory.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code name} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> name() {
            return name;
        }

        /**
         * The meta-property for the {@code attributes} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<PrinterAttribute>> attributes() {
            return attributes;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3373707:  // name
                    return ((PrinterAttributeCategory) bean).getName();
                case 405645655:  // attributes
                    return ((PrinterAttributeCategory) bean).getAttributes();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3373707:  // name
                    ((PrinterAttributeCategory) bean).setName((String) newValue);
                    return;
                case 405645655:  // attributes
                    ((PrinterAttributeCategory) bean).setAttributes((List<PrinterAttribute>) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}

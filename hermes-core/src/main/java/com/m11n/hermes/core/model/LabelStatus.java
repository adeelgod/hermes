package com.m11n.hermes.core.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.joda.beans.*;
import org.joda.beans.impl.direct.*;

import javax.xml.bind.annotation.XmlRootElement;
import java.util.Map;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
@JsonIgnoreProperties({"meta", "metaBean"})
@XmlRootElement(name = "label_status")
public class LabelStatus extends DirectBean
{
    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    private String status;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    private String text;

    public LabelStatus() {

    }

    public LabelStatus(String status, String text) {
        this.status = status;
        this.text = text;
    }

    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code LabelStatus}.
     * @return the meta-bean, not null
     */
    public static LabelStatus.Meta meta() {
        return LabelStatus.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(LabelStatus.Meta.INSTANCE);
    }

    @Override
    public LabelStatus.Meta metaBean() {
        return LabelStatus.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the status.
     * @return the value of the property
     */
    public String getStatus() {
        return status;
    }

    /**
     * Sets the status.
     * @param status  the new value of the property
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Gets the the {@code status} property.
     * @return the property, not null
     */
    public final Property<String> status() {
        return metaBean().status().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the text.
     * @return the value of the property
     */
    public String getText() {
        return text;
    }

    /**
     * Sets the text.
     * @param text  the new value of the property
     */
    public void setText(String text) {
        this.text = text;
    }

    /**
     * Gets the the {@code text} property.
     * @return the property, not null
     */
    public final Property<String> text() {
        return metaBean().text().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public LabelStatus clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            LabelStatus other = (LabelStatus) obj;
            return JodaBeanUtils.equal(getStatus(), other.getStatus()) &&
                    JodaBeanUtils.equal(getText(), other.getText());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash += hash * 31 + JodaBeanUtils.hashCode(getStatus());
        hash += hash * 31 + JodaBeanUtils.hashCode(getText());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(96);
        buf.append("LabelStatus{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("status").append('=').append(JodaBeanUtils.toString(getStatus())).append(',').append(' ');
        buf.append("text").append('=').append(JodaBeanUtils.toString(getText())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code LabelStatus}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code status} property.
         */
        private final MetaProperty<String> status = DirectMetaProperty.ofReadWrite(
                this, "status", LabelStatus.class, String.class);
        /**
         * The meta-property for the {@code text} property.
         */
        private final MetaProperty<String> text = DirectMetaProperty.ofReadWrite(
                this, "text", LabelStatus.class, String.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "status",
                "text");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case -892481550:  // status
                    return status;
                case 3556653:  // text
                    return text;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends LabelStatus> builder() {
            return new DirectBeanBuilder<LabelStatus>(new LabelStatus());
        }

        @Override
        public Class<? extends LabelStatus> beanType() {
            return LabelStatus.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code status} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> status() {
            return status;
        }

        /**
         * The meta-property for the {@code text} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> text() {
            return text;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -892481550:  // status
                    return ((LabelStatus) bean).getStatus();
                case 3556653:  // text
                    return ((LabelStatus) bean).getText();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -892481550:  // status
                    ((LabelStatus) bean).setStatus((String) newValue);
                    return;
                case 3556653:  // text
                    ((LabelStatus) bean).setText((String) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}

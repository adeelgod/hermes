package com.m11n.hermes.core.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.hibernate.annotations.GenericGenerator;
import org.joda.beans.*;
import org.joda.beans.impl.direct.*;

import javax.persistence.*;
import javax.xml.bind.annotation.XmlRootElement;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
@JsonIgnoreProperties({"meta", "metaBean"})
@XmlRootElement(name = "form")
@Entity
@Table(name = "hermes_form")
public class Form extends DirectBean
{
    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @javax.persistence.Id
    @GeneratedValue(generator = "uuid")
    @GenericGenerator(name = "uuid", strategy = "uuid2")
    @Column(name = "uuid", unique = true)
    private String id;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "db")
    private String db;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "name")
    private String name;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "description")
    private String description;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "schedule")
    private String schedule;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "menu")
    private String menu;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "execute_on_startup")
    private Boolean executeOnStartup;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "sql_statement", length = 16384)
    private String sqlStatement;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "pos")
    private Integer position;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "font_size")
    private Integer fontSize;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "printable")
    private Boolean printable;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "access_public")
    private Boolean accessPublic;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Deprecated
    @ElementCollection(fetch = FetchType.EAGER)
    @CollectionTable(name="hermes_form_width", joinColumns=@JoinColumn(name="form_id"))
    @Column(name = "width")
    private Set<Integer> widths = new HashSet<>();

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
    @JoinColumn(name="form_id", referencedColumnName="uuid")
    private List<FormField> fields;

    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code Form}.
     * @return the meta-bean, not null
     */
    public static Form.Meta meta() {
        return Form.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(Form.Meta.INSTANCE);
    }

    @Override
    public Form.Meta metaBean() {
        return Form.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the id.
     * @return the value of the property
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the id.
     * @param id  the new value of the property
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Gets the the {@code id} property.
     * @return the property, not null
     */
    public final Property<String> id() {
        return metaBean().id().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the db.
     * @return the value of the property
     */
    public String getDb() {
        return db;
    }

    /**
     * Sets the db.
     * @param db  the new value of the property
     */
    public void setDb(String db) {
        this.db = db;
    }

    /**
     * Gets the the {@code db} property.
     * @return the property, not null
     */
    public final Property<String> db() {
        return metaBean().db().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the name.
     * @return the value of the property
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name.
     * @param name  the new value of the property
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Gets the the {@code name} property.
     * @return the property, not null
     */
    public final Property<String> name() {
        return metaBean().name().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the description.
     * @return the value of the property
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the description.
     * @param description  the new value of the property
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Gets the the {@code description} property.
     * @return the property, not null
     */
    public final Property<String> description() {
        return metaBean().description().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the schedule.
     * @return the value of the property
     */
    public String getSchedule() {
        return schedule;
    }

    /**
     * Sets the schedule.
     * @param schedule  the new value of the property
     */
    public void setSchedule(String schedule) {
        this.schedule = schedule;
    }

    /**
     * Gets the the {@code schedule} property.
     * @return the property, not null
     */
    public final Property<String> schedule() {
        return metaBean().schedule().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the menu.
     * @return the value of the property
     */
    public String getMenu() {
        return menu;
    }

    /**
     * Sets the menu.
     * @param menu  the new value of the property
     */
    public void setMenu(String menu) {
        this.menu = menu;
    }

    /**
     * Gets the the {@code menu} property.
     * @return the property, not null
     */
    public final Property<String> menu() {
        return metaBean().menu().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the executeOnStartup.
     * @return the value of the property
     */
    public Boolean getExecuteOnStartup() {
        return executeOnStartup;
    }

    /**
     * Sets the executeOnStartup.
     * @param executeOnStartup  the new value of the property
     */
    public void setExecuteOnStartup(Boolean executeOnStartup) {
        this.executeOnStartup = executeOnStartup;
    }

    /**
     * Gets the the {@code executeOnStartup} property.
     * @return the property, not null
     */
    public final Property<Boolean> executeOnStartup() {
        return metaBean().executeOnStartup().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the sqlStatement.
     * @return the value of the property
     */
    public String getSqlStatement() {
        return sqlStatement;
    }

    /**
     * Sets the sqlStatement.
     * @param sqlStatement  the new value of the property
     */
    public void setSqlStatement(String sqlStatement) {
        this.sqlStatement = sqlStatement;
    }

    /**
     * Gets the the {@code sqlStatement} property.
     * @return the property, not null
     */
    public final Property<String> sqlStatement() {
        return metaBean().sqlStatement().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the position.
     * @return the value of the property
     */
    public Integer getPosition() {
        return position;
    }

    /**
     * Sets the position.
     * @param position  the new value of the property
     */
    public void setPosition(Integer position) {
        this.position = position;
    }

    /**
     * Gets the the {@code position} property.
     * @return the property, not null
     */
    public final Property<Integer> position() {
        return metaBean().position().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the printable.
     * @return the value of the property
     */
    public Boolean getPrintable() {
        return printable;
    }

    /**
     * Sets the printable.
     * @param printable  the new value of the property
     */
    public void setPrintable(Boolean printable) {
        this.printable = printable;
    }

    /**
     * Gets the the {@code printable} property.
     * @return the property, not null
     */
    public final Property<Boolean> printable() {
        return metaBean().printable().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the accessPublic.
     * @return the value of the property
     */
    public Boolean getAccessPublic() {
        return accessPublic;
    }

    /**
     * Sets the accessPublic.
     * @param accessPublic  the new value of the property
     */
    public void setAccessPublic(Boolean accessPublic) {
        this.accessPublic = accessPublic;
    }

    /**
     * Gets the the {@code accessPublic} property.
     * @return the property, not null
     */
    public final Property<Boolean> accessPublic() {
        return metaBean().accessPublic().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the widths.
     * @return the value of the property
     */
    @Deprecated
    public Set<Integer> getWidths() {
        return widths;
    }

    /**
     * Sets the widths.
     * @param widths  the new value of the property
     */
    @Deprecated
    public void setWidths(Set<Integer> widths) {
        this.widths = widths;
    }

    /**
     * Gets the the {@code widths} property.
     * @return the property, not null
     */
    @Deprecated
    public final Property<Set<Integer>> widths() {
        return metaBean().widths().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the fields.
     * @return the value of the property
     */
    public List<FormField> getFields() {
        return fields;
    }

    /**
     * Sets the fields.
     * @param fields  the new value of the property
     */
    public void setFields(List<FormField> fields) {
        this.fields = fields;
    }

    /**
     * Gets the the {@code fields} property.
     * @return the property, not null
     */
    public final Property<List<FormField>> fields() {
        return metaBean().fields().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public Form clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            Form other = (Form) obj;
            return JodaBeanUtils.equal(getId(), other.getId()) &&
                    JodaBeanUtils.equal(getDb(), other.getDb()) &&
                    JodaBeanUtils.equal(getName(), other.getName()) &&
                    JodaBeanUtils.equal(getDescription(), other.getDescription()) &&
                    JodaBeanUtils.equal(getSchedule(), other.getSchedule()) &&
                    JodaBeanUtils.equal(getMenu(), other.getMenu()) &&
                    JodaBeanUtils.equal(getExecuteOnStartup(), other.getExecuteOnStartup()) &&
                    JodaBeanUtils.equal(getSqlStatement(), other.getSqlStatement()) &&
                    JodaBeanUtils.equal(getPosition(), other.getPosition()) &&
                    JodaBeanUtils.equal(getPrintable(), other.getPrintable()) &&
                    JodaBeanUtils.equal(getAccessPublic(), other.getAccessPublic()) &&
                    JodaBeanUtils.equal(getWidths(), other.getWidths()) &&
                    JodaBeanUtils.equal(getFields(), other.getFields());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash += hash * 31 + JodaBeanUtils.hashCode(getId());
        hash += hash * 31 + JodaBeanUtils.hashCode(getDb());
        hash += hash * 31 + JodaBeanUtils.hashCode(getName());
        hash += hash * 31 + JodaBeanUtils.hashCode(getDescription());
        hash += hash * 31 + JodaBeanUtils.hashCode(getSchedule());
        hash += hash * 31 + JodaBeanUtils.hashCode(getMenu());
        hash += hash * 31 + JodaBeanUtils.hashCode(getExecuteOnStartup());
        hash += hash * 31 + JodaBeanUtils.hashCode(getSqlStatement());
        hash += hash * 31 + JodaBeanUtils.hashCode(getPosition());
        hash += hash * 31 + JodaBeanUtils.hashCode(getPrintable());
        hash += hash * 31 + JodaBeanUtils.hashCode(getAccessPublic());
        hash += hash * 31 + JodaBeanUtils.hashCode(getWidths());
        hash += hash * 31 + JodaBeanUtils.hashCode(getFields());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(448);
        buf.append("Form{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("id").append('=').append(JodaBeanUtils.toString(getId())).append(',').append(' ');
        buf.append("db").append('=').append(JodaBeanUtils.toString(getDb())).append(',').append(' ');
        buf.append("name").append('=').append(JodaBeanUtils.toString(getName())).append(',').append(' ');
        buf.append("description").append('=').append(JodaBeanUtils.toString(getDescription())).append(',').append(' ');
        buf.append("schedule").append('=').append(JodaBeanUtils.toString(getSchedule())).append(',').append(' ');
        buf.append("menu").append('=').append(JodaBeanUtils.toString(getMenu())).append(',').append(' ');
        buf.append("executeOnStartup").append('=').append(JodaBeanUtils.toString(getExecuteOnStartup())).append(',').append(' ');
        buf.append("sqlStatement").append('=').append(JodaBeanUtils.toString(getSqlStatement())).append(',').append(' ');
        buf.append("position").append('=').append(JodaBeanUtils.toString(getPosition())).append(',').append(' ');
        buf.append("printable").append('=').append(JodaBeanUtils.toString(getPrintable())).append(',').append(' ');
        buf.append("accessPublic").append('=').append(JodaBeanUtils.toString(getAccessPublic())).append(',').append(' ');
        buf.append("widths").append('=').append(JodaBeanUtils.toString(getWidths())).append(',').append(' ');
        buf.append("fields").append('=').append(JodaBeanUtils.toString(getFields())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code Form}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code id} property.
         */
        private final MetaProperty<String> id = DirectMetaProperty.ofReadWrite(
                this, "id", Form.class, String.class);
        /**
         * The meta-property for the {@code db} property.
         */
        private final MetaProperty<String> db = DirectMetaProperty.ofReadWrite(
                this, "db", Form.class, String.class);
        /**
         * The meta-property for the {@code name} property.
         */
        private final MetaProperty<String> name = DirectMetaProperty.ofReadWrite(
                this, "name", Form.class, String.class);
        /**
         * The meta-property for the {@code description} property.
         */
        private final MetaProperty<String> description = DirectMetaProperty.ofReadWrite(
                this, "description", Form.class, String.class);
        /**
         * The meta-property for the {@code schedule} property.
         */
        private final MetaProperty<String> schedule = DirectMetaProperty.ofReadWrite(
                this, "schedule", Form.class, String.class);
        /**
         * The meta-property for the {@code menu} property.
         */
        private final MetaProperty<String> menu = DirectMetaProperty.ofReadWrite(
                this, "menu", Form.class, String.class);
        /**
         * The meta-property for the {@code executeOnStartup} property.
         */
        private final MetaProperty<Boolean> executeOnStartup = DirectMetaProperty.ofReadWrite(
                this, "executeOnStartup", Form.class, Boolean.class);
        /**
         * The meta-property for the {@code sqlStatement} property.
         */
        private final MetaProperty<String> sqlStatement = DirectMetaProperty.ofReadWrite(
                this, "sqlStatement", Form.class, String.class);
        /**
         * The meta-property for the {@code position} property.
         */
        private final MetaProperty<Integer> position = DirectMetaProperty.ofReadWrite(
                this, "position", Form.class, Integer.class);
        /**
         * The meta-property for the {@code printable} property.
         */
        private final MetaProperty<Boolean> printable = DirectMetaProperty.ofReadWrite(
                this, "printable", Form.class, Boolean.class);
        /**
         * The meta-property for the {@code accessPublic} property.
         */
        private final MetaProperty<Boolean> accessPublic = DirectMetaProperty.ofReadWrite(
                this, "accessPublic", Form.class, Boolean.class);
        /**
         * The meta-property for the {@code widths} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<Set<Integer>> widths = DirectMetaProperty.ofReadWrite(
                this, "widths", Form.class, (Class) Set.class);
        /**
         * The meta-property for the {@code fields} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<FormField>> fields = DirectMetaProperty.ofReadWrite(
                this, "fields", Form.class, (Class) List.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "id",
                "db",
                "name",
                "description",
                "schedule",
                "menu",
                "executeOnStartup",
                "sqlStatement",
                "position",
                "printable",
                "accessPublic",
                "widths",
                "fields");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return id;
                case 3198:  // db
                    return db;
                case 3373707:  // name
                    return name;
                case -1724546052:  // description
                    return description;
                case -697920873:  // schedule
                    return schedule;
                case 3347807:  // menu
                    return menu;
                case 694222761:  // executeOnStartup
                    return executeOnStartup;
                case 937767745:  // sqlStatement
                    return sqlStatement;
                case 747804969:  // position
                    return position;
                case -1796593273:  // printable
                    return printable;
                case 1927133421:  // accessPublic
                    return accessPublic;
                case -788034707:  // widths
                    return widths;
                case -1274708295:  // fields
                    return fields;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends Form> builder() {
            return new DirectBeanBuilder<Form>(new Form());
        }

        @Override
        public Class<? extends Form> beanType() {
            return Form.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code id} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> id() {
            return id;
        }

        /**
         * The meta-property for the {@code db} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> db() {
            return db;
        }

        /**
         * The meta-property for the {@code name} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> name() {
            return name;
        }

        /**
         * The meta-property for the {@code description} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> description() {
            return description;
        }

        /**
         * The meta-property for the {@code schedule} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> schedule() {
            return schedule;
        }

        /**
         * The meta-property for the {@code menu} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> menu() {
            return menu;
        }

        /**
         * The meta-property for the {@code executeOnStartup} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Boolean> executeOnStartup() {
            return executeOnStartup;
        }

        /**
         * The meta-property for the {@code sqlStatement} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> sqlStatement() {
            return sqlStatement;
        }

        /**
         * The meta-property for the {@code position} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> position() {
            return position;
        }

        /**
         * The meta-property for the {@code printable} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Boolean> printable() {
            return printable;
        }

        /**
         * The meta-property for the {@code accessPublic} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Boolean> accessPublic() {
            return accessPublic;
        }

        /**
         * The meta-property for the {@code widths} property.
         * @return the meta-property, not null
         */
        @Deprecated
        public final MetaProperty<Set<Integer>> widths() {
            return widths;
        }

        /**
         * The meta-property for the {@code fields} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<FormField>> fields() {
            return fields;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return ((Form) bean).getId();
                case 3198:  // db
                    return ((Form) bean).getDb();
                case 3373707:  // name
                    return ((Form) bean).getName();
                case -1724546052:  // description
                    return ((Form) bean).getDescription();
                case -697920873:  // schedule
                    return ((Form) bean).getSchedule();
                case 3347807:  // menu
                    return ((Form) bean).getMenu();
                case 694222761:  // executeOnStartup
                    return ((Form) bean).getExecuteOnStartup();
                case 937767745:  // sqlStatement
                    return ((Form) bean).getSqlStatement();
                case 747804969:  // position
                    return ((Form) bean).getPosition();
                case -1796593273:  // printable
                    return ((Form) bean).getPrintable();
                case 1927133421:  // accessPublic
                    return ((Form) bean).getAccessPublic();
                case -788034707:  // widths
                    return ((Form) bean).getWidths();
                case -1274708295:  // fields
                    return ((Form) bean).getFields();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    ((Form) bean).setId((String) newValue);
                    return;
                case 3198:  // db
                    ((Form) bean).setDb((String) newValue);
                    return;
                case 3373707:  // name
                    ((Form) bean).setName((String) newValue);
                    return;
                case -1724546052:  // description
                    ((Form) bean).setDescription((String) newValue);
                    return;
                case -697920873:  // schedule
                    ((Form) bean).setSchedule((String) newValue);
                    return;
                case 3347807:  // menu
                    ((Form) bean).setMenu((String) newValue);
                    return;
                case 694222761:  // executeOnStartup
                    ((Form) bean).setExecuteOnStartup((Boolean) newValue);
                    return;
                case 937767745:  // sqlStatement
                    ((Form) bean).setSqlStatement((String) newValue);
                    return;
                case 747804969:  // position
                    ((Form) bean).setPosition((Integer) newValue);
                    return;
                case -1796593273:  // printable
                    ((Form) bean).setPrintable((Boolean) newValue);
                    return;
                case 1927133421:  // accessPublic
                    ((Form) bean).setAccessPublic((Boolean) newValue);
                    return;
                case -788034707:  // widths
                    ((Form) bean).setWidths((Set<Integer>) newValue);
                    return;
                case -1274708295:  // fields
                    ((Form) bean).setFields((List<FormField>) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}

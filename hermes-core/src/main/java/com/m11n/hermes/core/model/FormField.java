package com.m11n.hermes.core.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.hibernate.annotations.GenericGenerator;
import org.joda.beans.*;
import org.joda.beans.impl.direct.*;

import javax.persistence.*;
import javax.xml.bind.annotation.XmlRootElement;
import java.util.*;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import java.util.Map;

@BeanDefinition
@JsonIgnoreProperties({"meta", "metaBean"})
@XmlRootElement(name = "form_field")
@Entity
@Table(name = "hermes_form_field")
public class FormField extends DirectBean
{
    public static enum Type {
        TEXT, NUMBER, BOOLEAN, DATE, TIME, DATETIME
    }

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @javax.persistence.Id
    @GeneratedValue(generator = "uuid")
    @GenericGenerator(name = "uuid", strategy = "uuid2")
    @Column(name = "uuid", unique = true)
    private String id;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "form_id")
    private String formId;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "name")
    private String name;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "description")
    private String description;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "default_value")
    private String defValue;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "pos")
    private Integer position;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "type")
    private String fieldType;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @ElementCollection(fetch = FetchType.EAGER)
    @CollectionTable(name="hermes_form_field_lookup", joinColumns=@JoinColumn(name="form_field_id"))
    @Column(name = "value")
    private Set<String> lookup = new HashSet<>();

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "is_parameter")
    private Boolean parameter;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "is_column")
    private Boolean column;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "width")
    private Integer width;

    public FormField() {

    }

    public FormField(String name, String fieldType, Integer position, String defValue, String description, Boolean parameter, Boolean column) {
        this.name = name;
        this.fieldType = fieldType;
        this.position = position;
        this.defValue = defValue;
        this.description = description;
        this.parameter = parameter;
        this.column = column;
    }

    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code FormField}.
     * @return the meta-bean, not null
     */
    public static FormField.Meta meta() {
        return FormField.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(FormField.Meta.INSTANCE);
    }

    @Override
    public FormField.Meta metaBean() {
        return FormField.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the id.
     * @return the value of the property
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the id.
     * @param id  the new value of the property
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Gets the the {@code id} property.
     * @return the property, not null
     */
    public final Property<String> id() {
        return metaBean().id().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the formId.
     * @return the value of the property
     */
    public String getFormId() {
        return formId;
    }

    /**
     * Sets the formId.
     * @param formId  the new value of the property
     */
    public void setFormId(String formId) {
        this.formId = formId;
    }

    /**
     * Gets the the {@code formId} property.
     * @return the property, not null
     */
    public final Property<String> formId() {
        return metaBean().formId().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the name.
     * @return the value of the property
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name.
     * @param name  the new value of the property
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Gets the the {@code name} property.
     * @return the property, not null
     */
    public final Property<String> name() {
        return metaBean().name().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the description.
     * @return the value of the property
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the description.
     * @param description  the new value of the property
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Gets the the {@code description} property.
     * @return the property, not null
     */
    public final Property<String> description() {
        return metaBean().description().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the defValue.
     * @return the value of the property
     */
    public String getDefValue() {
        return defValue;
    }

    /**
     * Sets the defValue.
     * @param defValue  the new value of the property
     */
    public void setDefValue(String defValue) {
        this.defValue = defValue;
    }

    /**
     * Gets the the {@code defValue} property.
     * @return the property, not null
     */
    public final Property<String> defValue() {
        return metaBean().defValue().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the position.
     * @return the value of the property
     */
    public Integer getPosition() {
        return position;
    }

    /**
     * Sets the position.
     * @param position  the new value of the property
     */
    public void setPosition(Integer position) {
        this.position = position;
    }

    /**
     * Gets the the {@code position} property.
     * @return the property, not null
     */
    public final Property<Integer> position() {
        return metaBean().position().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the fieldType.
     * @return the value of the property
     */
    public String getFieldType() {
        return fieldType;
    }

    /**
     * Sets the fieldType.
     * @param fieldType  the new value of the property
     */
    public void setFieldType(String fieldType) {
        this.fieldType = fieldType;
    }

    /**
     * Gets the the {@code fieldType} property.
     * @return the property, not null
     */
    public final Property<String> fieldType() {
        return metaBean().fieldType().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the lookup.
     * @return the value of the property
     */
    public Set<String> getLookup() {
        return lookup;
    }

    /**
     * Sets the lookup.
     * @param lookup  the new value of the property
     */
    public void setLookup(Set<String> lookup) {
        this.lookup = lookup;
    }

    /**
     * Gets the the {@code lookup} property.
     * @return the property, not null
     */
    public final Property<Set<String>> lookup() {
        return metaBean().lookup().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the parameter.
     * @return the value of the property
     */
    public Boolean getParameter() {
        return parameter;
    }

    /**
     * Sets the parameter.
     * @param parameter  the new value of the property
     */
    public void setParameter(Boolean parameter) {
        this.parameter = parameter;
    }

    /**
     * Gets the the {@code parameter} property.
     * @return the property, not null
     */
    public final Property<Boolean> parameter() {
        return metaBean().parameter().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the column.
     * @return the value of the property
     */
    public Boolean getColumn() {
        return column;
    }

    /**
     * Sets the column.
     * @param column  the new value of the property
     */
    public void setColumn(Boolean column) {
        this.column = column;
    }

    /**
     * Gets the the {@code column} property.
     * @return the property, not null
     */
    public final Property<Boolean> column() {
        return metaBean().column().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the width.
     * @return the value of the property
     */
    public Integer getWidth() {
        return width;
    }

    /**
     * Sets the width.
     * @param width  the new value of the property
     */
    public void setWidth(Integer width) {
        this.width = width;
    }

    /**
     * Gets the the {@code width} property.
     * @return the property, not null
     */
    public final Property<Integer> width() {
        return metaBean().width().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public FormField clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            FormField other = (FormField) obj;
            return JodaBeanUtils.equal(getId(), other.getId()) &&
                    JodaBeanUtils.equal(getFormId(), other.getFormId()) &&
                    JodaBeanUtils.equal(getName(), other.getName()) &&
                    JodaBeanUtils.equal(getDescription(), other.getDescription()) &&
                    JodaBeanUtils.equal(getDefValue(), other.getDefValue()) &&
                    JodaBeanUtils.equal(getPosition(), other.getPosition()) &&
                    JodaBeanUtils.equal(getFieldType(), other.getFieldType()) &&
                    JodaBeanUtils.equal(getLookup(), other.getLookup()) &&
                    JodaBeanUtils.equal(getParameter(), other.getParameter()) &&
                    JodaBeanUtils.equal(getColumn(), other.getColumn()) &&
                    JodaBeanUtils.equal(getWidth(), other.getWidth());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getId());
        hash = hash * 31 + JodaBeanUtils.hashCode(getFormId());
        hash = hash * 31 + JodaBeanUtils.hashCode(getName());
        hash = hash * 31 + JodaBeanUtils.hashCode(getDescription());
        hash = hash * 31 + JodaBeanUtils.hashCode(getDefValue());
        hash = hash * 31 + JodaBeanUtils.hashCode(getPosition());
        hash = hash * 31 + JodaBeanUtils.hashCode(getFieldType());
        hash = hash * 31 + JodaBeanUtils.hashCode(getLookup());
        hash = hash * 31 + JodaBeanUtils.hashCode(getParameter());
        hash = hash * 31 + JodaBeanUtils.hashCode(getColumn());
        hash = hash * 31 + JodaBeanUtils.hashCode(getWidth());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(384);
        buf.append("FormField{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("id").append('=').append(JodaBeanUtils.toString(getId())).append(',').append(' ');
        buf.append("formId").append('=').append(JodaBeanUtils.toString(getFormId())).append(',').append(' ');
        buf.append("name").append('=').append(JodaBeanUtils.toString(getName())).append(',').append(' ');
        buf.append("description").append('=').append(JodaBeanUtils.toString(getDescription())).append(',').append(' ');
        buf.append("defValue").append('=').append(JodaBeanUtils.toString(getDefValue())).append(',').append(' ');
        buf.append("position").append('=').append(JodaBeanUtils.toString(getPosition())).append(',').append(' ');
        buf.append("fieldType").append('=').append(JodaBeanUtils.toString(getFieldType())).append(',').append(' ');
        buf.append("lookup").append('=').append(JodaBeanUtils.toString(getLookup())).append(',').append(' ');
        buf.append("parameter").append('=').append(JodaBeanUtils.toString(getParameter())).append(',').append(' ');
        buf.append("column").append('=').append(JodaBeanUtils.toString(getColumn())).append(',').append(' ');
        buf.append("width").append('=').append(JodaBeanUtils.toString(getWidth())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code FormField}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code id} property.
         */
        private final MetaProperty<String> id = DirectMetaProperty.ofReadWrite(
                this, "id", FormField.class, String.class);
        /**
         * The meta-property for the {@code formId} property.
         */
        private final MetaProperty<String> formId = DirectMetaProperty.ofReadWrite(
                this, "formId", FormField.class, String.class);
        /**
         * The meta-property for the {@code name} property.
         */
        private final MetaProperty<String> name = DirectMetaProperty.ofReadWrite(
                this, "name", FormField.class, String.class);
        /**
         * The meta-property for the {@code description} property.
         */
        private final MetaProperty<String> description = DirectMetaProperty.ofReadWrite(
                this, "description", FormField.class, String.class);
        /**
         * The meta-property for the {@code defValue} property.
         */
        private final MetaProperty<String> defValue = DirectMetaProperty.ofReadWrite(
                this, "defValue", FormField.class, String.class);
        /**
         * The meta-property for the {@code position} property.
         */
        private final MetaProperty<Integer> position = DirectMetaProperty.ofReadWrite(
                this, "position", FormField.class, Integer.class);
        /**
         * The meta-property for the {@code fieldType} property.
         */
        private final MetaProperty<String> fieldType = DirectMetaProperty.ofReadWrite(
                this, "fieldType", FormField.class, String.class);
        /**
         * The meta-property for the {@code lookup} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<Set<String>> lookup = DirectMetaProperty.ofReadWrite(
                this, "lookup", FormField.class, (Class) Set.class);
        /**
         * The meta-property for the {@code parameter} property.
         */
        private final MetaProperty<Boolean> parameter = DirectMetaProperty.ofReadWrite(
                this, "parameter", FormField.class, Boolean.class);
        /**
         * The meta-property for the {@code column} property.
         */
        private final MetaProperty<Boolean> column = DirectMetaProperty.ofReadWrite(
                this, "column", FormField.class, Boolean.class);
        /**
         * The meta-property for the {@code width} property.
         */
        private final MetaProperty<Integer> width = DirectMetaProperty.ofReadWrite(
                this, "width", FormField.class, Integer.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "id",
                "formId",
                "name",
                "description",
                "defValue",
                "position",
                "fieldType",
                "lookup",
                "parameter",
                "column",
                "width");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return id;
                case -1268779777:  // formId
                    return formId;
                case 3373707:  // name
                    return name;
                case -1724546052:  // description
                    return description;
                case 633526380:  // defValue
                    return defValue;
                case 747804969:  // position
                    return position;
                case 1265211220:  // fieldType
                    return fieldType;
                case -1097094790:  // lookup
                    return lookup;
                case 1954460585:  // parameter
                    return parameter;
                case -1354837162:  // column
                    return column;
                case 113126854:  // width
                    return width;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends FormField> builder() {
            return new DirectBeanBuilder<FormField>(new FormField());
        }

        @Override
        public Class<? extends FormField> beanType() {
            return FormField.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code id} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> id() {
            return id;
        }

        /**
         * The meta-property for the {@code formId} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> formId() {
            return formId;
        }

        /**
         * The meta-property for the {@code name} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> name() {
            return name;
        }

        /**
         * The meta-property for the {@code description} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> description() {
            return description;
        }

        /**
         * The meta-property for the {@code defValue} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> defValue() {
            return defValue;
        }

        /**
         * The meta-property for the {@code position} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> position() {
            return position;
        }

        /**
         * The meta-property for the {@code fieldType} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> fieldType() {
            return fieldType;
        }

        /**
         * The meta-property for the {@code lookup} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Set<String>> lookup() {
            return lookup;
        }

        /**
         * The meta-property for the {@code parameter} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Boolean> parameter() {
            return parameter;
        }

        /**
         * The meta-property for the {@code column} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Boolean> column() {
            return column;
        }

        /**
         * The meta-property for the {@code width} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> width() {
            return width;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return ((FormField) bean).getId();
                case -1268779777:  // formId
                    return ((FormField) bean).getFormId();
                case 3373707:  // name
                    return ((FormField) bean).getName();
                case -1724546052:  // description
                    return ((FormField) bean).getDescription();
                case 633526380:  // defValue
                    return ((FormField) bean).getDefValue();
                case 747804969:  // position
                    return ((FormField) bean).getPosition();
                case 1265211220:  // fieldType
                    return ((FormField) bean).getFieldType();
                case -1097094790:  // lookup
                    return ((FormField) bean).getLookup();
                case 1954460585:  // parameter
                    return ((FormField) bean).getParameter();
                case -1354837162:  // column
                    return ((FormField) bean).getColumn();
                case 113126854:  // width
                    return ((FormField) bean).getWidth();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    ((FormField) bean).setId((String) newValue);
                    return;
                case -1268779777:  // formId
                    ((FormField) bean).setFormId((String) newValue);
                    return;
                case 3373707:  // name
                    ((FormField) bean).setName((String) newValue);
                    return;
                case -1724546052:  // description
                    ((FormField) bean).setDescription((String) newValue);
                    return;
                case 633526380:  // defValue
                    ((FormField) bean).setDefValue((String) newValue);
                    return;
                case 747804969:  // position
                    ((FormField) bean).setPosition((Integer) newValue);
                    return;
                case 1265211220:  // fieldType
                    ((FormField) bean).setFieldType((String) newValue);
                    return;
                case -1097094790:  // lookup
                    ((FormField) bean).setLookup((Set<String>) newValue);
                    return;
                case 1954460585:  // parameter
                    ((FormField) bean).setParameter((Boolean) newValue);
                    return;
                case -1354837162:  // column
                    ((FormField) bean).setColumn((Boolean) newValue);
                    return;
                case 113126854:  // width
                    ((FormField) bean).setWidth((Integer) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}

package com.m11n.hermes.core.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.hibernate.annotations.GenericGenerator;
import org.joda.beans.*;
import org.joda.beans.impl.direct.*;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlRootElement;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
@JsonIgnoreProperties({"meta", "metaBean"})
@XmlRootElement(name = "form_field")
@Entity
@Table(name = "form_field")
public class FormField extends DirectBean
{
    public static enum Type {
        TEXT, NUMBER, BOOLEAN, DATE, TIME, DATETIME
    }

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @javax.persistence.Id
    @GeneratedValue(generator = "uuid")
    @GenericGenerator(name = "uuid", strategy = "uuid2")
    @Column(name = "uuid", unique = true)
    private String uid;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "form")
    private String form;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "name")
    private String name;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "default_value")
    private String defaultValue;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "position")
    private Integer position;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "type")
    private String type;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    private String lookup;

    public FormField() {

    }

    public FormField(String name, String type, Integer position) {
        this.name = name;
        this.type = type;
        this.position = position;
    }

    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code FormField}.
     * @return the meta-bean, not null
     */
    public static FormField.Meta meta() {
        return FormField.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(FormField.Meta.INSTANCE);
    }

    @Override
    public FormField.Meta metaBean() {
        return FormField.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the uid.
     * @return the value of the property
     */
    public String getUid() {
        return uid;
    }

    /**
     * Sets the uid.
     * @param uid  the new value of the property
     */
    public void setUid(String uid) {
        this.uid = uid;
    }

    /**
     * Gets the the {@code uid} property.
     * @return the property, not null
     */
    public final Property<String> uid() {
        return metaBean().uid().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the form.
     * @return the value of the property
     */
    public String getForm() {
        return form;
    }

    /**
     * Sets the form.
     * @param form  the new value of the property
     */
    public void setForm(String form) {
        this.form = form;
    }

    /**
     * Gets the the {@code form} property.
     * @return the property, not null
     */
    public final Property<String> form() {
        return metaBean().form().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the name.
     * @return the value of the property
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name.
     * @param name  the new value of the property
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Gets the the {@code name} property.
     * @return the property, not null
     */
    public final Property<String> name() {
        return metaBean().name().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the defaultValue.
     * @return the value of the property
     */
    public String getDefaultValue() {
        return defaultValue;
    }

    /**
     * Sets the defaultValue.
     * @param defaultValue  the new value of the property
     */
    public void setDefaultValue(String defaultValue) {
        this.defaultValue = defaultValue;
    }

    /**
     * Gets the the {@code defaultValue} property.
     * @return the property, not null
     */
    public final Property<String> defaultValue() {
        return metaBean().defaultValue().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the position.
     * @return the value of the property
     */
    public Integer getPosition() {
        return position;
    }

    /**
     * Sets the position.
     * @param position  the new value of the property
     */
    public void setPosition(Integer position) {
        this.position = position;
    }

    /**
     * Gets the the {@code position} property.
     * @return the property, not null
     */
    public final Property<Integer> position() {
        return metaBean().position().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the type.
     * @return the value of the property
     */
    public String getType() {
        return type;
    }

    /**
     * Sets the type.
     * @param type  the new value of the property
     */
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Gets the the {@code type} property.
     * @return the property, not null
     */
    public final Property<String> type() {
        return metaBean().type().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the lookup.
     * @return the value of the property
     */
    public String getLookup() {
        return lookup;
    }

    /**
     * Sets the lookup.
     * @param lookup  the new value of the property
     */
    public void setLookup(String lookup) {
        this.lookup = lookup;
    }

    /**
     * Gets the the {@code lookup} property.
     * @return the property, not null
     */
    public final Property<String> lookup() {
        return metaBean().lookup().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public FormField clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            FormField other = (FormField) obj;
            return JodaBeanUtils.equal(getUid(), other.getUid()) &&
                    JodaBeanUtils.equal(getForm(), other.getForm()) &&
                    JodaBeanUtils.equal(getName(), other.getName()) &&
                    JodaBeanUtils.equal(getDefaultValue(), other.getDefaultValue()) &&
                    JodaBeanUtils.equal(getPosition(), other.getPosition()) &&
                    JodaBeanUtils.equal(getType(), other.getType()) &&
                    JodaBeanUtils.equal(getLookup(), other.getLookup());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash += hash * 31 + JodaBeanUtils.hashCode(getUid());
        hash += hash * 31 + JodaBeanUtils.hashCode(getForm());
        hash += hash * 31 + JodaBeanUtils.hashCode(getName());
        hash += hash * 31 + JodaBeanUtils.hashCode(getDefaultValue());
        hash += hash * 31 + JodaBeanUtils.hashCode(getPosition());
        hash += hash * 31 + JodaBeanUtils.hashCode(getType());
        hash += hash * 31 + JodaBeanUtils.hashCode(getLookup());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(256);
        buf.append("FormField{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("uid").append('=').append(JodaBeanUtils.toString(getUid())).append(',').append(' ');
        buf.append("form").append('=').append(JodaBeanUtils.toString(getForm())).append(',').append(' ');
        buf.append("name").append('=').append(JodaBeanUtils.toString(getName())).append(',').append(' ');
        buf.append("defaultValue").append('=').append(JodaBeanUtils.toString(getDefaultValue())).append(',').append(' ');
        buf.append("position").append('=').append(JodaBeanUtils.toString(getPosition())).append(',').append(' ');
        buf.append("type").append('=').append(JodaBeanUtils.toString(getType())).append(',').append(' ');
        buf.append("lookup").append('=').append(JodaBeanUtils.toString(getLookup())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code FormField}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code uid} property.
         */
        private final MetaProperty<String> uid = DirectMetaProperty.ofReadWrite(
                this, "uid", FormField.class, String.class);
        /**
         * The meta-property for the {@code form} property.
         */
        private final MetaProperty<String> form = DirectMetaProperty.ofReadWrite(
                this, "form", FormField.class, String.class);
        /**
         * The meta-property for the {@code name} property.
         */
        private final MetaProperty<String> name = DirectMetaProperty.ofReadWrite(
                this, "name", FormField.class, String.class);
        /**
         * The meta-property for the {@code defaultValue} property.
         */
        private final MetaProperty<String> defaultValue = DirectMetaProperty.ofReadWrite(
                this, "defaultValue", FormField.class, String.class);
        /**
         * The meta-property for the {@code position} property.
         */
        private final MetaProperty<Integer> position = DirectMetaProperty.ofReadWrite(
                this, "position", FormField.class, Integer.class);
        /**
         * The meta-property for the {@code type} property.
         */
        private final MetaProperty<String> type = DirectMetaProperty.ofReadWrite(
                this, "type", FormField.class, String.class);
        /**
         * The meta-property for the {@code lookup} property.
         */
        private final MetaProperty<String> lookup = DirectMetaProperty.ofReadWrite(
                this, "lookup", FormField.class, String.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "uid",
                "form",
                "name",
                "defaultValue",
                "position",
                "type",
                "lookup");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 115792:  // uid
                    return uid;
                case 3148996:  // form
                    return form;
                case 3373707:  // name
                    return name;
                case -659125328:  // defaultValue
                    return defaultValue;
                case 747804969:  // position
                    return position;
                case 3575610:  // type
                    return type;
                case -1097094790:  // lookup
                    return lookup;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends FormField> builder() {
            return new DirectBeanBuilder<FormField>(new FormField());
        }

        @Override
        public Class<? extends FormField> beanType() {
            return FormField.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code uid} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> uid() {
            return uid;
        }

        /**
         * The meta-property for the {@code form} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> form() {
            return form;
        }

        /**
         * The meta-property for the {@code name} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> name() {
            return name;
        }

        /**
         * The meta-property for the {@code defaultValue} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> defaultValue() {
            return defaultValue;
        }

        /**
         * The meta-property for the {@code position} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> position() {
            return position;
        }

        /**
         * The meta-property for the {@code type} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> type() {
            return type;
        }

        /**
         * The meta-property for the {@code lookup} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> lookup() {
            return lookup;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 115792:  // uid
                    return ((FormField) bean).getUid();
                case 3148996:  // form
                    return ((FormField) bean).getForm();
                case 3373707:  // name
                    return ((FormField) bean).getName();
                case -659125328:  // defaultValue
                    return ((FormField) bean).getDefaultValue();
                case 747804969:  // position
                    return ((FormField) bean).getPosition();
                case 3575610:  // type
                    return ((FormField) bean).getType();
                case -1097094790:  // lookup
                    return ((FormField) bean).getLookup();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 115792:  // uid
                    ((FormField) bean).setUid((String) newValue);
                    return;
                case 3148996:  // form
                    ((FormField) bean).setForm((String) newValue);
                    return;
                case 3373707:  // name
                    ((FormField) bean).setName((String) newValue);
                    return;
                case -659125328:  // defaultValue
                    ((FormField) bean).setDefaultValue((String) newValue);
                    return;
                case 747804969:  // position
                    ((FormField) bean).setPosition((Integer) newValue);
                    return;
                case 3575610:  // type
                    ((FormField) bean).setType((String) newValue);
                    return;
                case -1097094790:  // lookup
                    ((FormField) bean).setLookup((String) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}

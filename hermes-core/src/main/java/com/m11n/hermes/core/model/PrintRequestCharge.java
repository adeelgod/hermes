package com.m11n.hermes.core.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.joda.beans.*;
import org.joda.beans.impl.direct.*;

import javax.xml.bind.annotation.XmlRootElement;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
@JsonIgnoreProperties({"meta", "metaBean"})
@XmlRootElement(name = "print_request_charge")
public class PrintRequestCharge extends DirectBean
{
    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    private Integer pos;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    private List<String> orders;

    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code PrintRequestCharge}.
     * @return the meta-bean, not null
     */
    public static PrintRequestCharge.Meta meta() {
        return PrintRequestCharge.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(PrintRequestCharge.Meta.INSTANCE);
    }

    @Override
    public PrintRequestCharge.Meta metaBean() {
        return PrintRequestCharge.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the pos.
     * @return the value of the property
     */
    public Integer getPos() {
        return pos;
    }

    /**
     * Sets the pos.
     * @param pos  the new value of the property
     */
    public void setPos(Integer pos) {
        this.pos = pos;
    }

    /**
     * Gets the the {@code pos} property.
     * @return the property, not null
     */
    public final Property<Integer> pos() {
        return metaBean().pos().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the orders.
     * @return the value of the property
     */
    public List<String> getOrders() {
        return orders;
    }

    /**
     * Sets the orders.
     * @param orders  the new value of the property
     */
    public void setOrders(List<String> orders) {
        this.orders = orders;
    }

    /**
     * Gets the the {@code orders} property.
     * @return the property, not null
     */
    public final Property<List<String>> orders() {
        return metaBean().orders().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public PrintRequestCharge clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            PrintRequestCharge other = (PrintRequestCharge) obj;
            return JodaBeanUtils.equal(getPos(), other.getPos()) &&
                    JodaBeanUtils.equal(getOrders(), other.getOrders());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getPos());
        hash = hash * 31 + JodaBeanUtils.hashCode(getOrders());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(96);
        buf.append("PrintRequestCharge{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("pos").append('=').append(JodaBeanUtils.toString(getPos())).append(',').append(' ');
        buf.append("orders").append('=').append(JodaBeanUtils.toString(getOrders())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code PrintRequestCharge}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code pos} property.
         */
        private final MetaProperty<Integer> pos = DirectMetaProperty.ofReadWrite(
                this, "pos", PrintRequestCharge.class, Integer.class);
        /**
         * The meta-property for the {@code orders} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<String>> orders = DirectMetaProperty.ofReadWrite(
                this, "orders", PrintRequestCharge.class, (Class) List.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "pos",
                "orders");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 111188:  // pos
                    return pos;
                case -1008770331:  // orders
                    return orders;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends PrintRequestCharge> builder() {
            return new DirectBeanBuilder<PrintRequestCharge>(new PrintRequestCharge());
        }

        @Override
        public Class<? extends PrintRequestCharge> beanType() {
            return PrintRequestCharge.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code pos} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> pos() {
            return pos;
        }

        /**
         * The meta-property for the {@code orders} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<String>> orders() {
            return orders;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 111188:  // pos
                    return ((PrintRequestCharge) bean).getPos();
                case -1008770331:  // orders
                    return ((PrintRequestCharge) bean).getOrders();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 111188:  // pos
                    ((PrintRequestCharge) bean).setPos((Integer) newValue);
                    return;
                case -1008770331:  // orders
                    ((PrintRequestCharge) bean).setOrders((List<String>) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}

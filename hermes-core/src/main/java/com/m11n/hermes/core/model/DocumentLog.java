package com.m11n.hermes.core.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.hibernate.annotations.GenericGenerator;
import org.springframework.data.annotation.Id;

import javax.persistence.*;
import javax.xml.bind.annotation.XmlRootElement;
import java.util.Date;
import java.util.Map;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

@BeanDefinition
@JsonIgnoreProperties({"meta", "metaBean"})
@XmlRootElement(name = "printer_log")
@Entity
@Table(name = "hermes_printer_log")
public class DocumentLog extends DirectBean
{
    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Id
    @javax.persistence.Id
    @GeneratedValue(generator = "uuid")
    @GenericGenerator(name = "uuid", strategy = "uuid2")
    @Column(name = "uuid", unique = true)
    private String uid;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "order_id")
    private String orderId;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "document_id")
    private String documentId;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "type")
    private String type;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "processed_at")
    private Date processedAt;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "printed_at")
    private Date printedAt;

    @PropertyDefinition
    @JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
    @Column(name = "printed")
    private Boolean printed = Boolean.FALSE;

    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code DocumentLog}.
     * @return the meta-bean, not null
     */
    public static DocumentLog.Meta meta() {
        return DocumentLog.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(DocumentLog.Meta.INSTANCE);
    }

    @Override
    public DocumentLog.Meta metaBean() {
        return DocumentLog.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the uid.
     * @return the value of the property
     */
    public String getUid() {
        return uid;
    }

    /**
     * Sets the uid.
     * @param uid  the new value of the property
     */
    public void setUid(String uid) {
        this.uid = uid;
    }

    /**
     * Gets the the {@code uid} property.
     * @return the property, not null
     */
    public final Property<String> uid() {
        return metaBean().uid().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the orderId.
     * @return the value of the property
     */
    public String getOrderId() {
        return orderId;
    }

    /**
     * Sets the orderId.
     * @param orderId  the new value of the property
     */
    public void setOrderId(String orderId) {
        this.orderId = orderId;
    }

    /**
     * Gets the the {@code orderId} property.
     * @return the property, not null
     */
    public final Property<String> orderId() {
        return metaBean().orderId().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the documentId.
     * @return the value of the property
     */
    public String getDocumentId() {
        return documentId;
    }

    /**
     * Sets the documentId.
     * @param documentId  the new value of the property
     */
    public void setDocumentId(String documentId) {
        this.documentId = documentId;
    }

    /**
     * Gets the the {@code documentId} property.
     * @return the property, not null
     */
    public final Property<String> documentId() {
        return metaBean().documentId().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the type.
     * @return the value of the property
     */
    public String getType() {
        return type;
    }

    /**
     * Sets the type.
     * @param type  the new value of the property
     */
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Gets the the {@code type} property.
     * @return the property, not null
     */
    public final Property<String> type() {
        return metaBean().type().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the processedAt.
     * @return the value of the property
     */
    public Date getProcessedAt() {
        return processedAt;
    }

    /**
     * Sets the processedAt.
     * @param processedAt  the new value of the property
     */
    public void setProcessedAt(Date processedAt) {
        this.processedAt = processedAt;
    }

    /**
     * Gets the the {@code processedAt} property.
     * @return the property, not null
     */
    public final Property<Date> processedAt() {
        return metaBean().processedAt().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the printedAt.
     * @return the value of the property
     */
    public Date getPrintedAt() {
        return printedAt;
    }

    /**
     * Sets the printedAt.
     * @param printedAt  the new value of the property
     */
    public void setPrintedAt(Date printedAt) {
        this.printedAt = printedAt;
    }

    /**
     * Gets the the {@code printedAt} property.
     * @return the property, not null
     */
    public final Property<Date> printedAt() {
        return metaBean().printedAt().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the printed.
     * @return the value of the property
     */
    public Boolean getPrinted() {
        return printed;
    }

    /**
     * Sets the printed.
     * @param printed  the new value of the property
     */
    public void setPrinted(Boolean printed) {
        this.printed = printed;
    }

    /**
     * Gets the the {@code printed} property.
     * @return the property, not null
     */
    public final Property<Boolean> printed() {
        return metaBean().printed().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public DocumentLog clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            DocumentLog other = (DocumentLog) obj;
            return JodaBeanUtils.equal(getUid(), other.getUid()) &&
                    JodaBeanUtils.equal(getOrderId(), other.getOrderId()) &&
                    JodaBeanUtils.equal(getDocumentId(), other.getDocumentId()) &&
                    JodaBeanUtils.equal(getType(), other.getType()) &&
                    JodaBeanUtils.equal(getProcessedAt(), other.getProcessedAt()) &&
                    JodaBeanUtils.equal(getPrintedAt(), other.getPrintedAt()) &&
                    JodaBeanUtils.equal(getPrinted(), other.getPrinted());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getUid());
        hash = hash * 31 + JodaBeanUtils.hashCode(getOrderId());
        hash = hash * 31 + JodaBeanUtils.hashCode(getDocumentId());
        hash = hash * 31 + JodaBeanUtils.hashCode(getType());
        hash = hash * 31 + JodaBeanUtils.hashCode(getProcessedAt());
        hash = hash * 31 + JodaBeanUtils.hashCode(getPrintedAt());
        hash = hash * 31 + JodaBeanUtils.hashCode(getPrinted());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(256);
        buf.append("DocumentLog{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("uid").append('=').append(JodaBeanUtils.toString(getUid())).append(',').append(' ');
        buf.append("orderId").append('=').append(JodaBeanUtils.toString(getOrderId())).append(',').append(' ');
        buf.append("documentId").append('=').append(JodaBeanUtils.toString(getDocumentId())).append(',').append(' ');
        buf.append("type").append('=').append(JodaBeanUtils.toString(getType())).append(',').append(' ');
        buf.append("processedAt").append('=').append(JodaBeanUtils.toString(getProcessedAt())).append(',').append(' ');
        buf.append("printedAt").append('=').append(JodaBeanUtils.toString(getPrintedAt())).append(',').append(' ');
        buf.append("printed").append('=').append(JodaBeanUtils.toString(getPrinted())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code DocumentLog}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code uid} property.
         */
        private final MetaProperty<String> uid = DirectMetaProperty.ofReadWrite(
                this, "uid", DocumentLog.class, String.class);
        /**
         * The meta-property for the {@code orderId} property.
         */
        private final MetaProperty<String> orderId = DirectMetaProperty.ofReadWrite(
                this, "orderId", DocumentLog.class, String.class);
        /**
         * The meta-property for the {@code documentId} property.
         */
        private final MetaProperty<String> documentId = DirectMetaProperty.ofReadWrite(
                this, "documentId", DocumentLog.class, String.class);
        /**
         * The meta-property for the {@code type} property.
         */
        private final MetaProperty<String> type = DirectMetaProperty.ofReadWrite(
                this, "type", DocumentLog.class, String.class);
        /**
         * The meta-property for the {@code processedAt} property.
         */
        private final MetaProperty<Date> processedAt = DirectMetaProperty.ofReadWrite(
                this, "processedAt", DocumentLog.class, Date.class);
        /**
         * The meta-property for the {@code printedAt} property.
         */
        private final MetaProperty<Date> printedAt = DirectMetaProperty.ofReadWrite(
                this, "printedAt", DocumentLog.class, Date.class);
        /**
         * The meta-property for the {@code printed} property.
         */
        private final MetaProperty<Boolean> printed = DirectMetaProperty.ofReadWrite(
                this, "printed", DocumentLog.class, Boolean.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "uid",
                "orderId",
                "documentId",
                "type",
                "processedAt",
                "printedAt",
                "printed");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 115792:  // uid
                    return uid;
                case -1207110391:  // orderId
                    return orderId;
                case -814940266:  // documentId
                    return documentId;
                case 3575610:  // type
                    return type;
                case 203012129:  // processedAt
                    return processedAt;
                case -1796473505:  // printedAt
                    return printedAt;
                case -314718196:  // printed
                    return printed;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends DocumentLog> builder() {
            return new DirectBeanBuilder<DocumentLog>(new DocumentLog());
        }

        @Override
        public Class<? extends DocumentLog> beanType() {
            return DocumentLog.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code uid} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> uid() {
            return uid;
        }

        /**
         * The meta-property for the {@code orderId} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> orderId() {
            return orderId;
        }

        /**
         * The meta-property for the {@code documentId} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> documentId() {
            return documentId;
        }

        /**
         * The meta-property for the {@code type} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> type() {
            return type;
        }

        /**
         * The meta-property for the {@code processedAt} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Date> processedAt() {
            return processedAt;
        }

        /**
         * The meta-property for the {@code printedAt} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Date> printedAt() {
            return printedAt;
        }

        /**
         * The meta-property for the {@code printed} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Boolean> printed() {
            return printed;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 115792:  // uid
                    return ((DocumentLog) bean).getUid();
                case -1207110391:  // orderId
                    return ((DocumentLog) bean).getOrderId();
                case -814940266:  // documentId
                    return ((DocumentLog) bean).getDocumentId();
                case 3575610:  // type
                    return ((DocumentLog) bean).getType();
                case 203012129:  // processedAt
                    return ((DocumentLog) bean).getProcessedAt();
                case -1796473505:  // printedAt
                    return ((DocumentLog) bean).getPrintedAt();
                case -314718196:  // printed
                    return ((DocumentLog) bean).getPrinted();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 115792:  // uid
                    ((DocumentLog) bean).setUid((String) newValue);
                    return;
                case -1207110391:  // orderId
                    ((DocumentLog) bean).setOrderId((String) newValue);
                    return;
                case -814940266:  // documentId
                    ((DocumentLog) bean).setDocumentId((String) newValue);
                    return;
                case 3575610:  // type
                    ((DocumentLog) bean).setType((String) newValue);
                    return;
                case 203012129:  // processedAt
                    ((DocumentLog) bean).setProcessedAt((Date) newValue);
                    return;
                case -1796473505:  // printedAt
                    ((DocumentLog) bean).setPrintedAt((Date) newValue);
                    return;
                case -314718196:  // printed
                    ((DocumentLog) bean).setPrinted((Boolean) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}
